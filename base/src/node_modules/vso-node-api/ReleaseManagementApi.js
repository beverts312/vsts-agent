/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var FormInputInterfaces = require("./interfaces/common/FormInputInterfaces");
var ReleaseManagementInterfaces = require("./interfaces/ReleaseManagementInterfaces");
var ReleaseManagementApi = (function (_super) {
    __extends(ReleaseManagementApi, _super);
    function ReleaseManagementApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-ReleaseManagement-api');
    }
    ReleaseManagementApi.prototype.getAgentArtifactDefinitions = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "d843590d-370d-47ef-97f5-bea3ceff021f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.AgentArtifactDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getApprovals = function (project, assignedToFilter, statusFilter, releaseIdFilter, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            assignedToFilter: assignedToFilter,
            statusFilter: statusFilter,
            releaseIdFilter: releaseIdFilter
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "1166ae8c-9f6d-4dcf-8544-b3d4c1eb4e4b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getApprovalHistory = function (project, approvalStepId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            approvalStepId: approvalStepId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "0b896e11-8fc4-4a23-8390-d144c1b4f832", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.updateReleaseApproval = function (approvalUpdateMetadata, project, approvalId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            approvalId: approvalId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "0173e33f-0f3f-4085-a001-90e5fc8e1f9b", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ApprovalUpdateMetadata, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, approvalUpdateMetadata, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.createArtifact = function (artifact, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "2b11036a-8011-4f3c-8492-9600ad9740b2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Artifact, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Artifact, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, artifact, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifact = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "2b11036a-8011-4f3c-8492-9600ad9740b2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Artifact, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifacts = function (project, typeId, name, sourceId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            typeId: typeId,
            name: name,
            sourceId: sourceId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "2b11036a-8011-4f3c-8492-9600ad9740b2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Artifact, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.updateArtifacts = function (artifactDefinitions, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "2b11036a-8011-4f3c-8492-9600ad9740b2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactDefinition, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactDefinition, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, artifactDefinitions, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.createReleaseDefinition = function (releaseDefinition, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6b4d717d-9b96-495d-bbfa-b54cbb0a77d6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, releaseDefinition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.deleteReleaseDefinition = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6b4d717d-9b96-495d-bbfa-b54cbb0a77d6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    ReleaseManagementApi.prototype.getReleaseDefinition = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6b4d717d-9b96-495d-bbfa-b54cbb0a77d6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getReleaseDefinitions = function (project, searchText, artifactIdFilter, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            searchText: searchText,
            artifactIdFilter: artifactIdFilter
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6b4d717d-9b96-495d-bbfa-b54cbb0a77d6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.updateReleaseDefinition = function (releaseDefinition, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6b4d717d-9b96-495d-bbfa-b54cbb0a77d6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, releaseDefinition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.createDefinitionEnvironmentTemplate = function (template, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6124b10c-df09-4ec6-85fe-00fab2c768e1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, template, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.deleteDefinitionEnvironmentTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            templateId: templateId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6124b10c-df09-4ec6-85fe-00fab2c768e1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    ReleaseManagementApi.prototype.getDefinitionEnvironmentTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            templateId: templateId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6124b10c-df09-4ec6-85fe-00fab2c768e1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.listDefinitionEnvironmentTemplates = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "6124b10c-df09-4ec6-85fe-00fab2c768e1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getInputValues = function (query, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "c55d6d03-d176-48a7-b083-db055dc0d017", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: FormInputInterfaces.TypeInfo.InputValuesQuery, responseTypeMetadata: FormInputInterfaces.TypeInfo.InputValuesQuery, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getLogs = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "e53a645a-4803-49a2-9669-7f5156e1b051", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getLog = function (project, releaseId, environmentId, taskId, attemptId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId,
            environmentId: environmentId,
            taskId: taskId
        };
        var queryValues = {
            attemptId: attemptId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "e53a645a-4803-49a2-9669-7f5156e1b052", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.createRelease = function (releaseStartMetadata, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseStartMetadata, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, releaseStartMetadata, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.deleteRelease = function (project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    ReleaseManagementApi.prototype.getRelease = function (project, releaseId, includeAllApprovals, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        var queryValues = {
            includeAllApprovals: includeAllApprovals
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getReleaseDefinitionSummary = function (project, definitionId, releaseCount, includeArtifact, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionId: definitionId,
            releaseCount: releaseCount,
            includeArtifact: includeArtifact
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseDefinitionSummary, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getReleases = function (project, definitionId, searchText, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionId: definitionId,
            searchText: searchText,
            statusFilter: statusFilter,
            minCreatedTime: minCreatedTime,
            maxCreatedTime: maxCreatedTime,
            queryOrder: queryOrder,
            '$top': top,
            continuationToken: continuationToken
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.updateRelease = function (release, project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, release, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.updateReleaseStatus = function (releaseUpdateMetadata, project, releaseId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            releaseId: releaseId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "5a351e69-12ea-426b-ac51-a1ec3a4526f7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ReleaseUpdateMetadata, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.Release, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, releaseUpdateMetadata, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifactsSources = function (project, typeId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            typeId: typeId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "e1270c26-707f-4c70-b8d8-0451d8647ed2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactSourceIdsQueryResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifactTypeDefinitions = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "e994d372-77c0-433f-a0db-13a67931a5a8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactTypeDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifactVersions = function (project, releaseDefinitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            releaseDefinitionId: releaseDefinitionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "00d6d075-cad1-4e02-ac77-4666ed953d87", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactVersionQueryResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    ReleaseManagementApi.prototype.getArtifactVersionsForSources = function (artifactSources, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ReleaseManagement", "00d6d075-cad1-4e02-ac77-4666ed953d87", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactSource, responseTypeMetadata: ReleaseManagementInterfaces.TypeInfo.ArtifactVersionQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, artifactSources, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return ReleaseManagementApi;
})(basem.ClientApiBase);
exports.ReleaseManagementApi = ReleaseManagementApi;
var QReleaseManagementApi = (function (_super) {
    __extends(QReleaseManagementApi, _super);
    function QReleaseManagementApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, ReleaseManagementApi);
    }
    QReleaseManagementApi.prototype.getAgentArtifactDefinitions = function (project, releaseId) {
        var deferred = Q.defer();
        this.api.getAgentArtifactDefinitions(project, releaseId, function (err, statusCode, agentartifacts) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agentartifacts);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getApprovals = function (project, assignedToFilter, statusFilter, releaseIdFilter) {
        var deferred = Q.defer();
        this.api.getApprovals(project, assignedToFilter, statusFilter, releaseIdFilter, function (err, statusCode, approvals) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approvals);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getApprovalHistory = function (project, approvalStepId) {
        var deferred = Q.defer();
        this.api.getApprovalHistory(project, approvalStepId, function (err, statusCode, approvals) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approvals);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.updateReleaseApproval = function (approvalUpdateMetadata, project, approvalId) {
        var deferred = Q.defer();
        this.api.updateReleaseApproval(approvalUpdateMetadata, project, approvalId, function (err, statusCode, approval) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(approval);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.createArtifact = function (artifact, project) {
        var deferred = Q.defer();
        this.api.createArtifact(artifact, project, function (err, statusCode, artifact) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifact);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifact = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.getArtifact(project, definitionId, function (err, statusCode, artifact) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifact);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifacts = function (project, typeId, name, sourceId) {
        var deferred = Q.defer();
        this.api.getArtifacts(project, typeId, name, sourceId, function (err, statusCode, artifacts) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifacts);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.updateArtifacts = function (artifactDefinitions, project) {
        var deferred = Q.defer();
        this.api.updateArtifacts(artifactDefinitions, project, function (err, statusCode, artifacts) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifacts);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.createReleaseDefinition = function (releaseDefinition, project) {
        var deferred = Q.defer();
        this.api.createReleaseDefinition(releaseDefinition, project, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getReleaseDefinition = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.getReleaseDefinition(project, definitionId, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getReleaseDefinitions = function (project, searchText, artifactIdFilter) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitions(project, searchText, artifactIdFilter, function (err, statusCode, definitions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definitions);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.updateReleaseDefinition = function (releaseDefinition, project) {
        var deferred = Q.defer();
        this.api.updateReleaseDefinition(releaseDefinition, project, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.createDefinitionEnvironmentTemplate = function (template, project) {
        var deferred = Q.defer();
        this.api.createDefinitionEnvironmentTemplate(template, project, function (err, statusCode, environmenttemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplate);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getDefinitionEnvironmentTemplate = function (project, templateId) {
        var deferred = Q.defer();
        this.api.getDefinitionEnvironmentTemplate(project, templateId, function (err, statusCode, environmenttemplate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplate);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.listDefinitionEnvironmentTemplates = function (project) {
        var deferred = Q.defer();
        this.api.listDefinitionEnvironmentTemplates(project, function (err, statusCode, environmenttemplates) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(environmenttemplates);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getInputValues = function (query, project) {
        var deferred = Q.defer();
        this.api.getInputValues(query, project, function (err, statusCode, inputvaluesquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(inputvaluesquery);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.createRelease = function (releaseStartMetadata, project) {
        var deferred = Q.defer();
        this.api.createRelease(releaseStartMetadata, project, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getRelease = function (project, releaseId, includeAllApprovals) {
        var deferred = Q.defer();
        this.api.getRelease(project, releaseId, includeAllApprovals, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getReleaseDefinitionSummary = function (project, definitionId, releaseCount, includeArtifact) {
        var deferred = Q.defer();
        this.api.getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getReleases = function (project, definitionId, searchText, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken) {
        var deferred = Q.defer();
        this.api.getReleases(project, definitionId, searchText, statusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, function (err, statusCode, releases) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(releases);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.updateRelease = function (release, project, releaseId) {
        var deferred = Q.defer();
        this.api.updateRelease(release, project, releaseId, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.updateReleaseStatus = function (releaseUpdateMetadata, project, releaseId) {
        var deferred = Q.defer();
        this.api.updateReleaseStatus(releaseUpdateMetadata, project, releaseId, function (err, statusCode, release) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(release);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifactsSources = function (project, typeId) {
        var deferred = Q.defer();
        this.api.getArtifactsSources(project, typeId, function (err, statusCode, source) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(source);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifactTypeDefinitions = function (project) {
        var deferred = Q.defer();
        this.api.getArtifactTypeDefinitions(project, function (err, statusCode, types) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(types);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifactVersions = function (project, releaseDefinitionId) {
        var deferred = Q.defer();
        this.api.getArtifactVersions(project, releaseDefinitionId, function (err, statusCode, version) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(version);
            }
        });
        return deferred.promise;
    };
    QReleaseManagementApi.prototype.getArtifactVersionsForSources = function (artifactSources, project) {
        var deferred = Q.defer();
        this.api.getArtifactVersionsForSources(artifactSources, project, function (err, statusCode, version) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(version);
            }
        });
        return deferred.promise;
    };
    return QReleaseManagementApi;
})(basem.QClientApiBase);
exports.QReleaseManagementApi = QReleaseManagementApi;
